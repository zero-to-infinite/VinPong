import { StatusBar } from "expo-status-bar";
import React, { useEffect, useState } from "react";
import {
  Text,
  View,
  TouchableOpacity,
  ScrollView,
  Dimensions,
  Image,
  ActivityIndicator,
  Platform,
} from "react-native";
import { useFocusEffect } from "@react-navigation/native";
import BottomNav from "../components/BottomNav";
import TopBar from "../components/TopBar";
import { AntDesign } from "@expo/vector-icons";
import { getAllImages, getAllUserImages } from "../services/storage";
import * as Location from "expo-location";
import styles from "../styles/HomeStyles";

const { width: SCREEN_WIDTH } = Dimensions.get("window");

const API_KEY = "9aebfd2a3e3ba2172d0b6aa7582d3ca9"; // openweathermap api key

export default function Home({ navigation }) {
  const [productImages, setProductImages] = useState([]); // ÌôàÏóê Î≥¥Ïùº ÏÉÅÌíà Ïù¥ÎØ∏ÏßÄÎì§
  const [storeImages, setStoreImages] = useState([]); // ÌôàÏóê Î≥¥Ïùº ÏÉÅÏ†ê Ïù¥ÎØ∏ÏßÄÎì§

  const [city, setCity] = useState(""); // ÌòÑÏû¨ ÏúÑÏπòÌïú ÎèÑÏãú
  const [weather, setWeather] = useState(""); // Ïò§Îäò ÎÇ†Ïî®
  const [temp, setTemp] = useState(""); // ÌòÑÏû¨ Ïò®ÎèÑ

  const [ok, setOk] = useState(true); // ÏúÑÏπò Ï†ïÎ≥¥ ÏàòÏßë ÌóàÏö© Ïó¨Î∂Ä

  const recommendDress = (temp, weather) => {
    if (temp < 5) {
      var text = "Ìå®Îî©Í≥º ÎëêÍ∫ºÏö¥ ÏΩîÌä∏, Î™©ÎèÑÎ¶¨Î•º Ï∂îÏ≤úÌï©ÎãàÎã§ :)";
    } else if (5 <= temp && temp < 9) {
      var text = "ÏΩîÌä∏, ÌûàÌä∏ÌÖç, ÎëêÍ∫ºÏö¥ ÎãàÌä∏Î•º Ï∂îÏ≤úÌï©ÎãàÎã§ :)";
    } else if (9 <= temp && temp < 12) {
      var text = "Ìä∏Î†åÏπòÏΩîÌä∏, ÏûêÏºì, ÎãàÌä∏Î•º Ï∂îÏ≤úÌï©ÎãàÎã§ :)";
    } else if (12 <= temp && temp < 17) {
      var text = "ÏûêÏºì, Í∞ÄÎîîÍ±¥, Ï°∞ÎÅºÎ•º Ï∂îÏ≤úÌï©ÎãàÎã§ :)";
    } else if (17 <= temp && temp < 20) {
      var text = "ÏñáÏùÄ ÎãàÌä∏, Îß®Ìà¨Îß®, ÌõÑÎìúÌã∞Î•º Ï∂îÏ≤úÌï©ÎãàÎã§ :)";
    } else if (20 <= temp && temp < 23) {
      var text = "ÏÖîÏ∏†, Í∏¥ÌåîÌã∞, Ï≤≠Î∞îÏßÄÎ•º Ï∂îÏ≤úÌï©ÎãàÎã§ :)";
    } else if (23 <= temp && temp < 28) {
      var text = "Î∞òÌåîÌã∞, Î∞òÎ∞îÏßÄ, ÏñáÏùÄ ÏÖîÏ∏†Î•º Ï∂îÏ≤úÌï©ÎãàÎã§ :)";
    } else if (28 <= temp) {
      var text = "ÎØºÏÜåÎß§, Î∞òÌåî, Î∞òÎ∞îÏßÄÎ•º Ï∂îÏ≤úÌï©ÎãàÎã§ :)";
    }

    var weatherLower = weather.toLowerCase();

    if (weatherLower.includes("clear")) {
      var icon = "‚òÄÔ∏è";
    } else if (weatherLower.includes("rain")) {
      var icon = "üåßÔ∏è";
    } else if (weatherLower.includes("cloudes")) {
      var icon = "üí®";
    } else if (weatherLower.includes("thunderstorm")) {
      var icon = "‚ö°Ô∏è";
    } else if (weatherLower.includes("snow")) {
      var icon = "‚ùÑÔ∏è";
    } else if (weatherLower.includes("mist")) {
      var icon = "üå´Ô∏è";
    } else {
      var icon = "‚ò∫Ô∏è";
    }
    return (
      <View style={styles.weatherInner}>
        <View style={styles.weatherLeft}>
          <Text style={styles.city}>{city}</Text>
          <Text style={styles.weather}>{weather}</Text>
          <Text style={styles.temp}>{Math.round(temp)}¬∞</Text>
        </View>
        <View style={styles.weatherRight}>
          <Text style={styles.dressIcon}>{icon}</Text>
          <Text style={styles.dressText}>{text}</Text>
        </View>
      </View>
    );
  };

  // ÌòÑÏû¨ Ïú†Ï†ÄÏùò ÏúÑÏπò Ï†ïÎ≥¥Î•º ÏàòÏßëÌïòÍ≥† ÎÇ†Ïî® Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò§Îäî Ìï®Ïàò
  const getWeather = async () => {
    try {
      const { granted } = await Location.requestForegroundPermissionsAsync();
      if (!granted) {
        setOk(false);
      }
      // ÌòÑÏû¨ ÏúÑÏπòÏùò ÏúÑÎèÑ, Í≤ΩÎèÑ ÏàòÏßë
      const {
        coords: { latitude, longitude },
      } = await Location.getCurrentPositionAsync({ accuracy: 5 });
      // ÏúÑÎèÑ, Í≤ΩÎèÑÎ•º Í∞ÄÏßÄÍ≥† Ï£ºÏÜåÏßÄÎ°ú Î≥ÄÌôò
      const location = await Location.reverseGeocodeAsync(
        { latitude, longitude },
        { useGoogleMaps: false }
      );
      setCity(location[0].city);
      // ÎÇ†Ïî® api Í∞ÄÏ†∏Ïò§Í∏∞
      try {
        const response = await fetch(
          `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&exclude=alerts&appid=${API_KEY}&units=metric`
        );
        const json = await response.json();
        setWeather(json.weather[0].main);
        setTemp(json.main.temp);
      } catch (e) {
        console.log(e);
      }
    } catch (err) {
      console.log(err);
    }
  };

  useEffect(() => {
    getWeather();
  }, []);

  useFocusEffect(
    React.useCallback(() => {
      const fetchImages = async () => {
        try {
          const productImagesList = await getAllImages();
          const storeImageList = await getAllUserImages();
          setProductImages(productImagesList);
          setStoreImages(storeImageList);
        } catch (error) {
          console.log(error);
        }
      };

      fetchImages();
    }, [])
  );

  return (
    <View style={styles.container}>
      <StatusBar style="auto" />

      <TopBar navigation={navigation} />

      <View style={styles.body}>
        <Image
          source={{
            uri: "https://firebasestorage.googleapis.com/v0/b/vinpong-3a05c.appspot.com/o/banner3.jpg?alt=media&token=3401f32e-8f7b-4efc-afcd-8e528485fbf6",
          }}
          style={styles.banner}
        />
        {Platform.OS !== "web" ? (
          <View style={styles.weatherBox}>
            {temp === "" ? (
              <View>
                <ActivityIndicator color="black" size="large" />
              </View>
            ) : (
              <View>{recommendDress(Math.round(temp), weather)}</View>
            )}
          </View>
        ) : null}

        <Text style={styles.bodyText}>Ï∂îÏ≤ú ÏÉÅÌíà</Text>
        <View style={styles.productContainer}>
          <ScrollView pagingEnabled horizontal>
            {productImages.map((value, key) => (
              <TouchableOpacity
                onPress={() => navigation.navigate("Detail", { src: value })}
                style={styles.product}
                key={key}
              >
                <Image style={styles.product} source={{ uri: value }} />
              </TouchableOpacity>
            ))}
          </ScrollView>
          <TouchableOpacity
            onPress={() => alert("Ïò§Î•∏Ï™ΩÏúºÎ°ú Ïä§ÌÅ¨Î°§ÏùÑ ÎÑòÍ≤®Î≥¥ÏÑ∏Ïöî!")}
            style={styles.scrollIcon}
          >
            <AntDesign name="rightcircle" size={24} color="#91B391" />
          </TouchableOpacity>
        </View>

        <Text style={styles.bodyText}>Ïù∏Í∏∞ ÏÉÅÏ†ê</Text>
        <View style={styles.productContainer}>
          <ScrollView pagingEnabled horizontal>
            {storeImages.map((value, key) => (
              <TouchableOpacity
                onPress={() => navigation.navigate("Store", { src: value })}
                style={styles.product}
                key={key}
              >
                <Image style={styles.product} source={{ uri: value }} />
              </TouchableOpacity>
            ))}
          </ScrollView>
          <TouchableOpacity
            onPress={() => alert("Ïò§Î•∏Ï™ΩÏúºÎ°ú Ïä§ÌÅ¨Î°§ÏùÑ ÎÑòÍ≤®Î≥¥ÏÑ∏Ïöî!")}
            style={styles.scrollIcon}
          >
            <AntDesign name="rightcircle" size={24} color="#91B391" />
          </TouchableOpacity>
        </View>
      </View>

      <BottomNav navigation={navigation} />
    </View>
  );
}
